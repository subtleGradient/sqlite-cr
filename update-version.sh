#!/usr/bin/env bash
# SPDX-License-Identifier: MIT
# SPDX-FileCopyrightText: 2024 subtleGradient
set -euo pipefail

# Check Bash version (declare -A requires Bash >= 4)
if [ -z "${BASH_VERSINFO:-}" ] || [ "${BASH_VERSINFO%%.*}" -lt 4 ]; then
  echo "Error: Bash >= 4 required. Run inside 'nix develop' (or install newer bash)." >&2
  exit 1
fi

# update-version.sh
# Script to update cr-sqlite version and regenerate hashes
# Makes version bumps painless and ensures green commits

if [ $# -ne 1 ]; then
    echo "Usage: $0 <new-version>"
    echo "Example: $0 0.17.0"
    exit 1
fi

NEW_VERSION="$1"
echo "Updating to cr-sqlite v$NEW_VERSION..."

# Update version in flake.nix (only the first occurrence)
# Using more precise sed to avoid multiple replacements
if ! sed -i.bak '0,/^[[:space:]]*version = ".*";/s//  version = "'"$NEW_VERSION"'";/' flake.nix; then
    echo "Error: Failed to update version in flake.nix" >&2
    exit 1
fi
rm -f flake.nix.bak

# Verify exactly one version line was updated
version_count=$(grep -c "version = \"$NEW_VERSION\"" flake.nix)
if [ "$version_count" -ne 1 ]; then
    echo "Error: Expected 1 version update, found $version_count" >&2
    exit 1
fi

# Prepare new hashes file
cat > hashes.nix.new <<EOF
# Cryptographic hashes for cr-sqlite v$NEW_VERSION binaries
# Auto-generated by update-version.sh - do not edit manually
{
EOF

PLATFORMS=(
    "aarch64-darwin"
    "x86_64-darwin"
    "x86_64-linux"
    "aarch64-linux"
)

echo
echo "⚠️  WARNING: This script downloads binaries and computes their hashes."
echo "   This is a TOFU (Trust On First Use) operation."
echo "   Verify the upstream release before trusting these hashes!"
echo "   Release URL: https://github.com/vlcn-io/cr-sqlite/releases/tag/v${NEW_VERSION}"
echo
if [ "${NONINTERACTIVE:-0}" = "1" ]; then
  REPLY=y
else
  read -p "Continue? (y/N) " -n 1 -r
  echo
fi
if [[ ! ${REPLY:-} =~ ^[Yy]$ ]]; then
    echo "Aborted."
    exit 1
fi

echo "Fetching new hashes (with verification)..."

# First pass: fetch all hashes
declare -A fetched_hashes
for platform in "${PLATFORMS[@]}"; do
    echo -n "  $platform: "
    
    # Determine platform parts
    case $platform in
        *-darwin) os="darwin" ;;
        *-linux) os="linux" ;;
    esac
    
    case $platform in
        aarch64-*) arch="aarch64" ;;
        x86_64-*) arch="x86_64" ;;
    esac
    
    url="https://github.com/vlcn-io/cr-sqlite/releases/download/v${NEW_VERSION}/crsqlite-${os}-${arch}.zip"
    
    # Fetch hash with proper error handling
    if hash=$(nix-prefetch-url "$url" --unpack 2>/dev/null); then
        fetched_hashes["$platform"]="$hash"
        echo "fetched"
    else
        echo "✗ FAILED"
        echo "Error: Failed to fetch $platform binary from $url" >&2
        exit 1
    fi
done

echo
echo "Verifying consistency (fetching again to ensure no TOCTOU)..."

# Second pass: verify hashes are consistent
for platform in "${PLATFORMS[@]}"; do
    echo -n "  $platform: "
    
    # Determine platform parts
    case $platform in
        *-darwin) os="darwin" ;;
        *-linux) os="linux" ;;
    esac
    
    case $platform in
        aarch64-*) arch="aarch64" ;;
        x86_64-*) arch="x86_64" ;;
    esac
    
    url="https://github.com/vlcn-io/cr-sqlite/releases/download/v${NEW_VERSION}/crsqlite-${os}-${arch}.zip"
    
    # Fetch hash again and verify consistency
    if hash2=$(nix-prefetch-url "$url" --unpack 2>/dev/null); then
        if [ "${fetched_hashes[$platform]}" = "$hash2" ]; then
            echo "✓ consistent"
        else
            echo "✗ INCONSISTENT!"
            echo "Error: Hash mismatch for $platform (possible TOCTOU attack)" >&2
            echo "  First:  ${fetched_hashes[$platform]}" >&2
            echo "  Second: $hash2" >&2
            exit 1
        fi
    else
        echo "✗ FAILED"
        echo "Error: Failed to re-fetch $platform binary" >&2
        exit 1
    fi
done

echo
echo "Writing hashes..."

# Write hashes
for platform in "${PLATFORMS[@]}"; do
    hash="${fetched_hashes[$platform]}"
    # Convert to SRI (base64) for consistency
    if command -v nix >/dev/null 2>&1; then
        sri_hash="$(printf '%s' "$hash" | nix hash convert --hash-algo sha256 --to sri 2>/dev/null || true)"
    fi
    : "${sri_hash:=sha256-$hash}"
    echo "  \"$platform\" = \"$sri_hash\";" >> hashes.nix.new
done

echo "}" >> hashes.nix.new

# Replace old hashes file
mv hashes.nix.new hashes.nix

echo
echo "Running tests..."
if nix run .#tests; then
    echo
    echo "✅ Version bumped to $NEW_VERSION successfully!"
    echo
    echo "Next steps:"
    echo "1. Review changes:"
    echo "   git diff flake.nix hashes.nix"
    echo "2. Commit:"
    echo "   git add flake.nix hashes.nix"
    echo "   git commit -m 'chore: update cr-sqlite to v$NEW_VERSION'"
else
    echo
    echo "❌ Tests failed! Version bump incomplete."
    echo "Please check the test output above."
    exit 1
fi