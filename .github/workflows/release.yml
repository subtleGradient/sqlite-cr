name: Release
on:
  push:
    tags:
      - 'v*'

jobs:
  build-and-release:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            system: x86_64-linux
            name: linux-x86_64
          - os: ubuntu-latest
            system: aarch64-linux
            name: linux-aarch64
          - os: macos-13
            system: x86_64-darwin
            name: darwin-x86_64
          - os: macos-15
            system: aarch64-darwin
            name: darwin-aarch64
    runs-on: ${{ matrix.os }}
    name: Build ${{ matrix.name }}

    steps:
    - uses: actions/checkout@v4

    - uses: DeterminateSystems/nix-installer-action@v19

    - run: |
        mkdir -p ~/.config/nix
        echo "experimental-features = nix-command flakes" >> ~/.config/nix/nix.conf

    # Build for specific system
    - name: Build sqlite-cr
      run: |
        nix build .#packages.${{ matrix.system }}.default
        cp -L result/bin/sqlite-cr sqlite-cr-${{ matrix.name }}
        chmod +x sqlite-cr-${{ matrix.name }}

    # Create tarball
    - name: Create archive
      run: tar czf sqlite-cr-${{ matrix.name }}.tar.gz sqlite-cr-${{ matrix.name }}

    # Create release (first job only) and upload assets
    - name: Create release and upload assets
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Check if release exists (only first job creates it)
        if ! gh release view "${{ github.ref_name }}" >/dev/null 2>&1; then
          gh release create "${{ github.ref_name }}" \
            --title "Release ${{ github.ref_name }}" \
            --notes "SQLite + cr-sqlite bundled for easy use.
        
## Installation

Via Nix:
\`\`\`bash
nix run github:${{ github.repository }} -- :memory: \"SELECT crsql_site_id();\"
\`\`\`

Or download platform-specific binaries below."
        fi
        
        # Upload the asset
        gh release upload "${{ github.ref_name }}" \
          "sqlite-cr-${{ matrix.name }}.tar.gz" \
          --clobber